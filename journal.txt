JAVASCRIPT HANDBOOK

// Get unique values of an array
var j = [...new Set([1, 2, 3, 3])]
>> [1, 2, 3]

// find the diff element

const elementDiff = (arr1, arr2) => {
	const newAr = new Set(arr1)
	return arr1.filter(arr => !newAr.has(arr)))	
}

var heroes = ['Batman','Flash','Superman','Wolverine']
var justiceLeaque = elementDiff(heroes, ['Wolverine']);
console.log(justiceLeaque);
Output -->
[ 'Batman', 'Flash', 'Superman' ]

// filter Boolean
To Filter Falsy values (0, null, undefined, null, false)
so this trick:
>> myArray
    .map(item => {
        // ...
    })
    // Get rid of bad values
    .filter(Boolean);
	=> the boolean values will be blowed away

// Create empty object
let dict = Object.create(null);

// dict.__proto__ === "undefined"
// No object properties exist until you 

// Merge Objects
const person = { name: 'David Walsh', gender: 'Male' };
const tools = { computer: 'Mac', editor: 'Atom' };
const attributes = { handsomeness: 'Extreme', hair: 'Brown', eyes: 'Blue' };

const summary = {...person, ...tools, ...attributes};
/*
Object {
  "computer": "Mac",
  "editor": "Atom",
  "eyes": "Blue",
  "gender": "Male",
  "hair": "Brown",
  "handsomeness": "Extreme",
  "name": "David Walsh",
}
*/
// Get query string parameter
URLSearchParams
var urlParams = new URLSearchParams(window.location.search);

console.log(urlParams.has('post')); // true
console.log(urlParams.get('action')); // "edit"
console.log(urlParams.getAll('action')); // ["edit"]
console.log(urlParams.toString()); // "?post=1234&action=edit"
console.log(urlParams.append('active', '1')); // "?post=1234&action=edit&active=1"

// Short-Circuit Evaluation

return (foo || []).length;

If the variable foo is truthy, it will be returned. Otherwise, the length of the empty array will be returned: 0 .

return (this.state.data || 'Fetching Data');

// Convert to String

const val = 1 + "";
console.log(val); // Result: "1"
console.log(typeof val); // Result: "string"

// Quick Float to Integer

console.log(23.9 | 0);  // Result: 23
console.log(-23.9 | 0); // Result: -23

//Get the Last Item(s) in an Array

let array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
console.log(array.slice(-1)); // Result: [9]
console.log(array.slice(-2)); // Result: [8, 9]
console.log(array.slice(-3)); // Result: [7, 8, 9]

// splice and splice and split

splice is mutable method
arr = [1, 2, 3, 1]
example: arr.splice(1, arr.length - 1)
=> arr: [2, 3, 1]
add element syntax: array.splice(index, number of elements, element)
delete element syntax: array.splice(index, number of elements)

slice is immutable method
arr  = [1, 2, 3, 1, 2]
example: let newArr = arr.slice(0, 3)
=> newArr: [1, 2, 3], arr: [1, 2, 3, 1, 2]

split 
split is immutable method
split is split string into substrings and return it as a array

forEach , map

forEach is mutable method
map is immutable method

// delete element in array

let index = arr.indexOf(val)

index > 1 && arr.splice(index, 1)

const deviceName = person?.device?.name;

// Merge Array 

const arr1 = [1, 2, 3]
const arr2 = [4,5,6]
const array = [...arr1,...arr2]

let newArray = Array(3).fill('')
console.log(newArray) => ['', '', '']

//REACT 
this.setState({ // set state }, () => {execute function here or this is call back})
._lodash
._pickBy(data, ._identity) => this is lodash'method is eleminate all falsy value in data

// substrings
array.substring(start, end) => (not include end index)
example: req.file.path : public\uploads\b14c9d87c7455a6768ffea73c19d6e32
let fileurl = req.file.path.replace(/\\/g, "/") => public/uploads/b14c9d87c7455a6768ffea73c19d6e32
fileurl.substrings("public".length)

// Cache

// Progressive Web App

// Pagination Summary

Checking Existent Properties in 2020

function getAppleExpirationDate(obj) {
  if (food.fruits && food.fruits.apple && food.fruits.apple.dates) {
    return food.fruits.apple.dates.expired
  }
}

==> Better way

function getAppleExpirationDate(obj) {
  return food?.fruits?.apple?.dates?.expired
}

// every
 const arr = [1,2,3,4,5,6,7,8,9,10]
 arr.every(n => n > 6) => false
 arr.every(n => n > 0) => true
 
 const withtab = JSON.stringify(example, ["student", "firstName", "lastName"], '\t')
 
 ==> this is result
 
 "student" : [
	{
		"firstName": "Tom",
		"lastName": "Hank"
	},
	{
		"firstName": "Ryan",
		"lastName": "Gosling"
	}
 ]
 
 distance between days
 let a= moment()
 let b= moment()
 a.dff(b, "days")